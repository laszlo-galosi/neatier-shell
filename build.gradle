// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: 'dependencies.gradle'
buildscript {
  apply from: 'dependencies.gradle'
  repositories {
    jcenter()
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url 'https://maven.fabric.io/public' }
  }

  dependencies {
    classpath gradlePlugins.android
    // Compile-time annotation processing.
    classpath gradlePlugins.apt
    // Backport of some Java 8 language features such as Lambdas and method references.
    classpath gradlePlugins.retrolambda
    // classpath gradlePlugins.androidDevMetrics
    classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.5.0'
    //Frodo
    classpath 'com.fernandocejas.frodo:frodo-plugin:0.8.3'
    //Crashlytics
    classpath 'io.fabric.tools:gradle:1.+'
    //Gradle build scan
    classpath 'com.gradle:build-scan-plugin:1.0'
  }
}

allprojects {
  def androidHome = System.getenv("ANDROID_SDK")
  repositories {
    jcenter()
  }


  ext {
    androidApplicationId = 'com.neatier.shell'
    androidVersionCode = 1
    androidVersionName = "1.0"
    testInstrumentationRunner = "android.support.test.runner.AndroidJUnitRunner"
    testApplicationId = 'com.neatier.shell.test'
  }
  configurations.all {
    resolutionStrategy.force 'com.android.support:support-annotations:23.3.0'
  }

  // print errors from test in the terminal
  tasks.withType(Test) {
    testLogging {
      displayGranularity = 2
      showStackTraces = true
      showCauses = true
      showExceptions = true
      exceptionFormat = "full"
      stackTraceFilters = ["entry_point", "truncate"]
      events "passed", "skipped", "failed"
    }
  }
}

apply plugin: 'com.gradle.build-scan'
buildScan {
  licenseAgreementUrl = 'https://gradle.com/terms-of-service'
  licenseAgree = 'yes'
}

allprojects.each { p ->
  println "$p.name - mindSdkVersion=${minSdk()}"
  println()
}

task clean(type: Delete) {
  delete rootProject.buildDir
}

